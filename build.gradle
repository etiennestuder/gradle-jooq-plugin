import org.gradle.util.GradleVersion

import static java.lang.Integer.parseInt

plugins {
    id 'nu.studer.plugindev' version '4.1'
    id 'com.gradle.plugin-publish' version '0.21.0'
    id 'org.nosphere.gradle.github.actions' version '1.3.2'
    id 'groovy'
}

group = 'nu.studer'
version = '7.1.2-DEV'

dependencies {
    api 'org.jooq:jooq-codegen:3.16.6'

    runtimeOnly 'org.glassfish.jaxb:jaxb-core:3.0.2'
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:3.0.2'

    testImplementation 'com.h2database:h2:2.1.214'
    testImplementation 'org.spockframework:spock-core:2.1-groovy-2.5'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

tasks.withType(AbstractCompile).configureEach {
    options.compilerArgs <<
        "-Werror" <<
        "-Xlint:all"
}

tasks.withType(JavaCompile).configureEach {
    javaCompiler.set(javaToolchains.compilerFor { spec ->
        spec.languageVersion.set(JavaLanguageVersion.of(11))
        buildScan.value(identityPath.path + "#jvmVersion", spec.languageVersion.get().asInt() as String)
    } as Provider<? extends JavaCompiler>)
}

tasks.withType(Test).configureEach {
    maxParallelForks = 1 // there is currently only a single test class
    useJUnitPlatform()

    String testJavaRuntimeVersion = findProperty('testJavaRuntimeVersion') ?: '11'
    String testGradleVersion = findProperty('testGradleVersion') ?: GradleVersion.current().version

    javaLauncher.set(javaToolchains.launcherFor { spec ->
        spec.languageVersion.set(JavaLanguageVersion.of(testJavaRuntimeVersion))
        buildScan.value(identityPath.path + "#jvmVersion", testJavaRuntimeVersion)
    } as Provider<? extends JavaLauncher>)

    systemProperty 'testContext.gradleVersion', testGradleVersion
    buildScan.value(identityPath.path + "#gradleVersion", testGradleVersion)

    def incompatibleJavaVsGradleVersions = parseInt(testJavaRuntimeVersion) >= 16 && parseInt(testGradleVersion.substring(0, testGradleVersion.indexOf('.'))) < 7
    if (incompatibleJavaVsGradleVersions) {
        enabled = false
    }
}

gradlePlugin {
    plugins {
        pluginDevPlugin {
            id = 'nu.studer.jooq'
            implementationClass = 'nu.studer.gradle.jooq.JooqPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/etiennestuder/gradle-jooq-plugin'
    vcsUrl = 'https://github.com/etiennestuder/gradle-jooq-plugin'
    description = 'Gradle plugin that integrates jOOQ.'
    tags = ['jooq']

    plugins {
        pluginDevPlugin {
            displayName = 'gradle-jooq-plugin'
        }
    }

    mavenCoordinates {
        groupId = 'nu.studer'
        artifactId = 'gradle-jooq-plugin'
    }
}

repositories {
    mavenCentral()
}
