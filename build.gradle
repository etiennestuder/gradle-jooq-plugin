import org.gradle.util.GradleVersion

import static java.lang.Integer.parseInt

plugins {
    id 'nu.studer.plugindev' version '4.1'
    id 'com.gradle.plugin-publish' version '1.2.1'
    id 'org.nosphere.gradle.github.actions' version '1.3.2'
    id 'groovy'
}

group = 'nu.studer'
version = '8.2.2-DEV'

configurations.all { Configuration c ->
    c.resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'jakarta.xml.bind' && details.requested.name == 'jakarta.xml.bind-api') {
            details.useVersion '3.0.1'
        }
    }
}

dependencies {
    api 'org.jooq:jooq-codegen:3.18.4'

    runtimeOnly 'org.glassfish.jaxb:jaxb-core:3.0.2'
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:3.0.2'

    testImplementation 'com.h2database:h2:2.2.220'
    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.BELLSOFT
    }
}

tasks.withType(AbstractCompile).configureEach {
    options.compilerArgs <<
        "-Werror" <<
        "-Xlint:all"
}

tasks.withType(Test).configureEach {
    maxParallelForks = 1 // there is currently only a single test class
    useJUnitPlatform()

    String testJavaRuntimeVersion = findProperty('testJavaRuntimeVersion') ?: '17'
    String testGradleVersion = findProperty('testGradleVersion') ?: GradleVersion.current().version

    javaLauncher.set(javaToolchains.launcherFor { spec ->
        spec.languageVersion.set(JavaLanguageVersion.of(testJavaRuntimeVersion))
        buildScan.value(identityPath.path + "#jvmVersion", testJavaRuntimeVersion)
    } as Provider<? extends JavaLauncher>)

    systemProperty 'testContext.gradleVersion', testGradleVersion
    buildScan.value(identityPath.path + "#gradleVersion", testGradleVersion)

    def incompatibleJavaVsGradleVersions = parseInt(testJavaRuntimeVersion) > 16 && GradleVersion.version(testGradleVersion) < GradleVersion.version('7.3') ||
        parseInt(testJavaRuntimeVersion) > 15 && GradleVersion.version(testGradleVersion) < GradleVersion.version('7.0')
    if (incompatibleJavaVsGradleVersions) {
        enabled = false
    }
}

tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:none', '-quiet')
}

gradlePlugin {
    website = 'https://github.com/etiennestuder/gradle-jooq-plugin'
    vcsUrl = 'https://github.com/etiennestuder/gradle-jooq-plugin'
    plugins {
        pluginDevPlugin {
            id = 'nu.studer.jooq'
            displayName = 'gradle-jooq-plugin'
            description = 'Gradle plugin that integrates jOOQ.'
            tags.set(['jooq'])
            implementationClass = 'nu.studer.gradle.jooq.JooqPlugin'
        }
    }
}
